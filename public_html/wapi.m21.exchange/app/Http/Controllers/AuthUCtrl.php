<?php


namespace App\Http\Controllers;

 
use App\Page;
use App;
use View;
use MetaTag; 

use App\ChargeCommision;
use App\Income;
use App\MemberExtra;
use App\Deposit;
use App\Gateway;
use App\Lib\GoogleAuthenticator;
use App\Transaction;
use App\User;
use Config;
use App\Coins;

use App\Exchange_deposit;
use App\Bnext_Wallet;
use App\System_Settings;

use App\Exchange_widthdraw;
use App\Exchange_bookings;
use Illuminate\Support\Facades\DB;

 
use App\Http\Controllers\Controller;


use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Session;
use Intervention\Image\Facades\Image;


use App\Notifications\Login;


class AuthUCtrl extends Controller
{
    private $request;

    public function __construct(Request $request)
    {
        $this->request = $request;
        
    // $this->middleware('auth');
            
            
    }
 
 
 
 
 
      public function user(Request $request)
    {
              
                $user = Auth::user();
                
                echo "sss";
       
        return response()->json($user->only(['id',   'email',  'first_name', 'last_name', 'address1', 'address2','state', 'country', 'mobile',
        'district', 'street', 'apartment_number', 'zip_code','house_no', 'city',  'dob', 'gender','profile_pic' ]));
        
    }
 
 
 
 
 
 public function getRegisterAPI(Request $request)
 {
       $ss  =new  User();
    
    
    
 $ss->username=$request->username;
 $ss->email=$request->email;
  
 
       $ss->password = bcrypt($request->password);
       
       
 
 try {
    $ss->save();
    
     $ar=  array();
  
  
       $ar['message']="Success ";
      
         $ar['Error']=false;
             
 return response()->json($ar);
    
}
 catch(\Illuminate\Database\QueryException $ex){
  $ar=  array();
  
  
       $ar['message']= "Duplicate Entry. Email Already existing in our system";
      
         $ar['Error']=true;
             
 return response()->json($ar);
}
  
  
 
     
     
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
public function getlogo()
{  

      $ss  =System_Settings::first();
      
  return response()->json($ss );
    
}   



public function networkfee()
{
    
  $ar=array();
    $ar['Error']=false; 
    
    $ar['result']['networkfee_regular']=  "10";
    $ar['result']['networkfee_priority']=  "100";
    
    return response()->json($ar);
    
   
} 

  public function postlogo(Request $request)
{
    
     if(Auth::user()->roll<>10)
        {
   $request->user()->token()->revoke();
   
   
        return response()->json([
            'message' => 'Unauthorised Access'
        ]);
        }
    $user = Auth::user();
       $ar=array();
        $user1=$user->id;
    if($user1< 9 )
    {
       
        $ar['Error']=false;
       $ar['message']="Unable to upload";   
        
 return response()->json($ar);
    exit();
    }
    
    
    
        $ar['Error']=true;
         
    $ss  = System_Settings::first();
    
    
    
 $ss->logo=$request->document;
 
    $ss->save();
    
    $ar['Settings']=$ss;
       $ar['message']="Successfully updated  ";
      
         $ar['Error']=false;
             
 return response()->json($ar);
    
 

}
     function UnconfirmedTransactions(  )
    {
        
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'http://34.65.189.79:8080/blockchain/transactions');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


$headers = array();
$headers[] = 'Accept: application/json';
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);



return $result ;

 
    }
    
    
   //
   function transactions(  )
    {
        
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'http://34.65.189.79:8080/blockchain/transactions');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


$headers = array();
$headers[] = 'Accept: application/json';
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);



return $result ;

 
    }
   function latest_blocks(  )
    {
        
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'http://34.65.189.79:8080/blockchain/blocks/latest');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


$headers = array();
$headers[] = 'Accept: application/json';
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);



return $result ;

 
    }
    
   function blocks(  )
    {
    
$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "http://34.65.189.79:8080/blockchain/blocks",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
));

$response = curl_exec($curl);

curl_close($curl);
 
      

return $response ;

 
    }
    
    function Balance(  )
    {
        $user_id= Auth::user()->id;
          $bn = Bnext_Wallet::where('user_id',$user_id)->get();
           
          //print_r($bn);
              $bal=0;
          foreach ($bn as $f) {
  
    
  $b=$this->BalancebygivenID( $f->address  );
  
  //$b=$b/100000000;
    
 $bal=$bal+$b;
 
 
}
$ar=array();
$bn1 = Bnext_Wallet::where('user_id',$user_id)->first();
           $address=$bn1->address;
$e=  number_format(  $bal,8);

$ar['balance']=$e;
$ar['address']=$address;
   return json_encode($ar);       
   
          
         // $address=$bn->address;
         
/*foreach()


BalancebygivenID( $address )



return $result ;
*/
 
    }
     function rate(Request $request)
    {
     //$user_id= Auth::user()->id;
          $no=$request->get('id');
          
          
          $f=file_get_contents("https://api.bitfinex.com/v1/pubticker/xrpusd");
          $s=json_decode($f);
         
          $rt=$s->bid;
         
          $no=$no*$rt*5;
          
          
    $ar=array();
    $ar['rate']=sprintf('%0.2f', $no)   ;  //  round($no,2);

   return json_encode($ar);    
          
}
    
    function BalancebygivenID( $address )
    {
       
        
        
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'http://34.65.189.79:8080/operator/'.$address.'/balance');



curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


$headers = array();
$headers[] = 'Accept: application/json';
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);

if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);
 

$res=json_decode($result);
 
 if ($res) {
    return $res->balance/100000000 ;
} else {
   return 0;
}

 
 
    }
    
    
    
    
    function sendFund()
    {
        
         //$bn = User::where('auth_key',$auth_key)->first();
         
             $ar=array();
                 $user_id= Auth::user()->id;
                 
                 
                 
      $bn1 = Bnext_Wallet::where('user_id',$user_id)->first();
      
      
  
  
   // var_dump($wallet);
   $toAddress=$this->request['toAddress'];
       $amount=$this->request['amount'] ."00000000"; 
       
$ch = curl_init();

$ar=array();


$ar['fromAddress']=  $bn1['address']; 

$ar['toAddress']=$toAddress;
  
  
$ar["amount"]=$amount;


$ar["changeAddress"]=$ar['fromAddress']; 



$json=json_encode($ar);


curl_setopt($ch, CURLOPT_URL, 'http://34.65.189.79:8080/operator/wallets/'.$bn1['wallet_id'].'/transactions');

curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);

curl_setopt($ch, CURLOPT_POSTFIELDS, $json );



$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Accept: application/json';
$headers[] = 'Password: '.$bn1['password'];
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);
/*
      $trid = DB::table('system_transactions')->insertGetId(
    [ 'user_id' => $user_id ,'coin' => $this->request['coin']  ,'cr' => 0 ,'dr' =>  $this->request['amount_coin']  ,'status' =>"Success" ,'description' =>"Widthdraw Request ". $this->request['to']   ]
);

     
            
     $id = DB::table('exchange_widthdraw')->insertGetId(
    [ 'user_id' => $user_id ,'coin' => $this->request['coin'] ,'amount' => $this->request['amount_coin'],'widthdraw_address' =>  $this->request['to'] ]
);
*/

$r=array();
   $r['status']=200;
   $r['result']=json_decode($result);
   
   $r['rawresult']= $result ; 
           
  $r['message']="Successfully";
    return response()->json($r);
return $result ;

 
    }
     
     
     public function confirm_payment(Request $request)
{ 
    
    
        
    
    //$user_id= Auth::user()->id;
 $data=DB::table('exchange_widthdraw')->where('id',$request->id)->orderBy('id', 'desc')->first()  ;
      
  return response()->json($data );
    
}  
     
    
    
    public function NewWallet(Request $r)
    {
        
        $ar=array();
 
 
   $deposit=   "";
       $user_id= Auth::user()->id;
       
       
      $bn1 = Bnext_Wallet::where('user_id',$user_id)->first();
      
     
      
      
          if(is_null( $bn1)  )
   {
 
 
   $bn1= $this->generateAddress($user_id);
   
   }
   
   
   
   
   // $deposit=  $this->getBtcAddress( );
   
   
   
   
    $ar['address']= $bn1['address'];
    $ar['wallet_id']= $bn1['wallet_id'];
    $ar['coin']="BTCV";
 
 
  
   
   
   
   $r=array();
   $r['status']=200;
   $r['result']=$ar;
  
    return response()->json($r);
  
        
    }
   //
    public function generateAddress($user_id)
    {
        
         
    
    $bn1 = Bnext_Wallet::where('user_id',$user_id)  ->get();
               
               
    
   
   if(count( $bn1) > 0)
   {
 
 
        
        return   $bn1 ;
   
   }
   
   
   
        $ar=array();
        
        
        
        $ar['password']=$this->password_generate( );
        
        
        
        
        $bn=new Bnext_Wallet();
        
          $bn->password=  $ar['password']; 
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'http://34.65.189.79:8080/operator/wallets');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS,json_encode($ar));

$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Accept: application/json';
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}

//print($result);

$res=json_decode($result);

$bn->user_id=$user_id;
 


  $bn->wallet_id=  $res->id;
   
$this->getNewAdrress(  $bn);
curl_close($ch);
return   $bn;
     
    }
    public function getNewAdrress(  $bn)
    {
        
        
        
        
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'http://34.65.189.79:8080/operator/wallets/'.  $bn->wallet_id.'/addresses');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);

$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Accept: application/json';
$headers[] = 'Password:   '.  $bn->password;
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);



$res=json_decode($result);


$bn->address=$res->address;

$bn->save();
return   $bn;


//echo json_encode($bn);

}
    
function password_generate( ) 
{
  
  
    $dictionary = array('like','just','love','know','never','want','time',
      'out','there','make','look','eye','down','only','think','heart','back',
      'then','into','about','more','away','still','them','take','thing','even',
      'through','long','always','world','too','friend','tell','try','hand',
      'thought','over','here','other','need','smile','again','much','cry','been',
      'night','ever','little','said','end','some','those','around','mind',
      'people','girl','leave','dream','left','turn','myself','give','nothing',
      'really','off','before','something','find','walk','wish','good','once',
      'place','ask','stop','keep','watch','seem','everything','wait','got','yet',
      'made','remember','start','alone','run','hope','maybe','believe','body',
      'hate','after','close','talk','stand','own','each','hurt','help','home',
      'god','soul','new','many','two','inside','should','true','first','fear',
      'mean','better','play','another','gone','change','use','wonder','someone',
      'hair','cold','open','best','any','behind','happen','water','dark','laugh',
      'stay','forever','name','work','show','sky','break','came','deep','door',
      'put','black','together','upon','happy','such','great','white','matter',
      'fill','past','please','burn','cause','enough','touch','moment','soon',
      'voice','scream','anything','stare','sound','red','everyone','hide','kiss',
      'truth','death','beautiful','mine','blood','broken','very','pass','next',
      'forget','tree','wrong','air','mother','understand','lip','hit','wall',
      'memory','sleep','free','high','realize','school','might','skin','sweet',
      'perfect','blue','kill','breath','dance','against','fly','between','grow',
      'strong','under','listen','bring','sometimes','speak','pull','person',
      'become','family','begin','ground','real','small','father','sure','feet',
      'rest','young','finally','land','across','today','different','guy','line',
      'fire','reason','reach','second','slowly','write','eat','smell','mouth',
      'step','learn','three','floor','promise','breathe','darkness','push',
      'earth','guess','save','song','above','along','both','color','house',
      'almost','sorry','anymore','brother','okay','dear','game','fade','already',
      'apart','warm','beauty','heard','notice','question','shine','began',
      'piece','whole','shadow','secret','street','within','finger','point',
      'morning','whisper','child','moon','green','story','glass','kid','silence',
      'since','soft','yourself','empty','shall','angel','answer','baby','bright',
      'dad','path','worry','hour','drop','follow','power','war','half','flow',
      'heaven','act','chance','fact','least','tired','children','near','quite',
      'afraid','rise','sea','taste','window','cover','nice','trust','lot','sad',
      'cool','force','peace','return','blind','easy','ready','roll','rose',
      'drive','held','music','beneath','hang','mom','paint','emotion','quiet',
      'clear','cloud','few','pretty','bird','outside','paper','picture','front',
      'rock','simple','anyone','meant','reality','road','sense','waste','bit',
      'leaf','thank','happiness','meet','men','smoke','truly','decide','self',
      'age','book','form','alive','carry','escape','damn','instead','able','ice',
      'minute','throw','catch','leg','ring','course','goodbye','lead','poem',
      'sick','corner','desire','known','problem','remind','shoulder','suppose',
      'toward','wave','drink','jump','woman','pretend','sister','week','human',
      'joy','crack','grey','pray','surprise','dry','knee','less','search',
      'bleed','caught','clean','embrace','future','king','son','sorrow','chest',
      'hug','remain','sat','worth','blow','daddy','final','parent','tight',
      'also','create','lonely','safe','cross','dress','evil','silent','bone',
      'fate','perhaps','anger','class','scar','snow','tiny','tonight','continue',
      'control','dog','edge','mirror','month','suddenly','comfort','given',
      'loud','quickly','gaze','plan','rush','stone','town','battle','ignore',
      'spirit','stood','stupid','yours','brown','build','dust','hey','kept',
      'pay','phone','twist','although','ball','beyond','hidden','nose','taken',
      'fail','float','pure','somehow','wash','wrap','angry','cheek','creature',
      'forgotten','heat','rip','single','space','special','weak','whatever',
      'yell','anyway','blame','job','choose','country','curse','drift','echo',
      'figure','grew','laughter','neck','suffer','worse','yeah','disappear',
      'foot','forward','knife','mess','somewhere','stomach','storm','beg','idea',
      'lift','offer','breeze','field','five','often','simply','stuck','win',
      'allow','confuse','enjoy','except','flower','seek','strength','calm',
      'grin','gun','heavy','hill','large','ocean','shoe','sigh','straight',
      'summer','tongue','accept','crazy','everyday','exist','grass','mistake',
      'sent','shut','surround','table','ache','brain','destroy','heal','nature',
      'shout','sign','stain','choice','doubt','glance','glow','mountain','queen',
      'stranger','throat','tomorrow','city','either','fish','flame','rather',
      'shape','spin','spread','ash','distance','finish','image','imagine',
      'important','nobody','shatter','warmth','became','feed','flesh','funny',
      'lust','shirt','trouble','yellow','attention','bare','bite','money',
      'protect','amaze','appear','born','choke','completely','daughter','fresh',
      'friendship','gentle','probably','six','deserve','expect','grab','middle',
      'nightmare','river','thousand','weight','worst','wound','barely','bottle',
      'cream','regret','relationship','stick','test','crush','endless','fault',
      'itself','rule','spill','art','circle','join','kick','mask','master',
      'passion','quick','raise','smooth','unless','wander','actually','broke',
      'chair','deal','favorite','gift','note','number','sweat','box','chill',
      'clothes','lady','mark','park','poor','sadness','tie','animal','belong',
      'brush','consume','dawn','forest','innocent','pen','pride','stream',
      'thick','clay','complete','count','draw','faith','press','silver',
      'struggle','surface','taught','teach','wet','bless','chase','climb',
      'enter','letter','melt','metal','movie','stretch','swing','vision','wife',
      'beside','crash','forgot','guide','haunt','joke','knock','plant','pour',
      'prove','reveal','steal','stuff','trip','wood','wrist','bother','bottom',
      'crawl','crowd','fix','forgive','frown','grace','loose','lucky','party',
      'release','surely','survive','teacher','gently','grip','speed','suicide',
      'travel','treat','vein','written','cage','chain','conversation','date',
      'enemy','however','interest','million','page','pink','proud','sway',
      'themselves','winter','church','cruel','cup','demon','experience',
      'freedom','pair','pop','purpose','respect','shoot','softly','state',
      'strange','bar','birth','curl','dirt','excuse','lord','lovely','monster',
      'order','pack','pants','pool','scene','seven','shame','slide','ugly',
      'among','blade','blonde','closet','creek','deny','drug','eternity','gain',
      'grade','handle','key','linger','pale','prepare','swallow','swim',
      'tremble','wheel','won','cast','cigarette','claim','college','direction',
      'dirty','gather','ghost','hundred','loss','lung','orange','present',
      'swear','swirl','twice','wild','bitter','blanket','doctor','everywhere',
      'flash','grown','knowledge','numb','pressure','radio','repeat','ruin',
      'spend','unknown','buy','clock','devil','early','false','fantasy','pound',
      'precious','refuse','sheet','teeth','welcome','add','ahead','block',
      'bury','caress','content','depth','despite','distant','marry','purple',
      'threw','whenever','bomb','dull','easily','grasp','hospital','innocence',
      'normal','receive','reply','rhyme','shade','someday','sword','toe','visit',
      'asleep','bought','center','consider','flat','hero','history','ink',
      'insane','muscle','mystery','pocket','reflection','shove','silently',
      'smart','soldier','spot','stress','train','type','view','whether','bus',
      'energy','explain','holy','hunger','inch','magic','mix','noise','nowhere',
      'prayer','presence','shock','snap','spider','study','thunder','trail',
      'admit','agree','bag','bang','bound','butterfly','cute','exactly',
      'explode','familiar','fold','further','pierce','reflect','scent','selfish',
      'sharp','sink','spring','stumble','universe','weep','women','wonderful',
      'action','ancient','attempt','avoid','birthday','branch','chocolate',
      'core','depress','drunk','especially','focus','fruit','honest','match',
      'palm','perfectly','pillow','pity','poison','roar','shift','slightly',
      'thump','truck','tune','twenty','unable','wipe','wrote','coat','constant',
      'dinner','drove','egg','eternal','flight','flood','frame','freak','gasp',
      'glad','hollow','motion','peer','plastic','root','screen','season','sting',
      'strike','team','unlike','victim','volume','warn','weird','attack','await',
      'awake','built','charm','crave','despair','fought','grant','grief','horse',
      'limit','message','ripple','sanity','scatter','serve','split','string',
      'trick','annoy','blur','boat','brave','clearly','cling','connect','fist',
      'forth','imagination','iron','jock','judge','lesson','milk','misery',
      'nail','naked','ourselves','poet','possible','princess','sail','size',
      'snake','society','stroke','torture','toss','trace','wise','bloom',
      'bullet','cell','check','cost','darling','during','footstep','fragile',
      'hallway','hardly','horizon','invisible','journey','midnight','mud','nod',
      'pause','relax','shiver','sudden','value','youth','abuse','admire','blink',
      'breast','bruise','constantly','couple','creep','curve','difference',
      'dumb','emptiness','gotta','honor','plain','planet','recall','rub','ship',
      'slam','soar','somebody','tightly','weather','adore','approach','bond',
      'bread','burst','candle','coffee','cousin','crime','desert','flutter',
      'frozen','grand','heel','hello','language','level','movement','pleasure',
      'powerful','random','rhythm','settle','silly','slap','sort','spoken',
      'steel','threaten','tumble','upset','aside','awkward','bee','blank',
      'board','button','card','carefully','complain','crap','deeply','discover',
      'drag','dread','effort','entire','fairy','giant','gotten','greet',
      'illusion','jeans','leap','liquid','march','mend','nervous','nine',
      'replace','rope','spine','stole','terror','accident','apple','balance',
      'boom','childhood','collect','demand','depression','eventually','faint',
      'glare','goal','group','honey','kitchen','laid','limb','machine','mere',
      'mold','murder','nerve','painful','poetry','prince','rabbit','shelter',
      'shore','shower','soothe','stair','steady','sunlight','tangle','tease',
      'treasure','uncle','begun','bliss','canvas','cheer','claw','clutch',
      'commit','crimson','crystal','delight','doll','existence','express','fog',
      'football','gay','goose','guard','hatred','illuminate','mass','math',
      'mourn','rich','rough','skip','stir','student','style','support','thorn',
      'tough','yard','yearn','yesterday','advice','appreciate','autumn','bank',
      'beam','bowl','capture','carve','collapse','confusion','creation','dove',
      'feather','girlfriend','glory','government','harsh','hop','inner','loser',
      'moonlight','neighbor','neither','peach','pig','praise','screw','shield',
      'shimmer','sneak','stab','subject','throughout','thrown','tower','twirl',
      'wow','army','arrive','bathroom','bump','cease','cookie','couch','courage',
      'dim','guilt','howl','hum','husband','insult','led','lunch','mock',
      'mostly','natural','nearly','needle','nerd','peaceful','perfection','pile',
      'price','remove','roam','sanctuary','serious','shiny','shook','sob',
      'stolen','tap','vain','void','warrior','wrinkle','affection','apologize',
      'blossom','bounce','bridge','cheap','crumble','decision','descend',
      'desperately','dig','dot','flip','frighten','heartbeat','huge','lazy',
      'lick','odd','opinion','process','puzzle','quietly','retreat','score',
      'sentence','separate','situation','skill','soak','square','stray','taint',
      'task','tide','underneath','veil','whistle','anywhere','bedroom','bid',
      'bloody','burden','careful','compare','concern','curtain','decay','defeat',
      'describe','double','dreamer','driver','dwell','evening','flare','flicker',
      'grandma','guitar','harm','horrible','hungry','indeed','lace','melody',
      'monkey','nation','object','obviously','rainbow','salt','scratch','shown',
      'shy','stage','stun','third','tickle','useless','weakness','worship',
      'worthless','afternoon','beard','boyfriend','bubble','busy','certain',
      'chin','concrete','desk','diamond','doom','drawn','due','felicity',
      'freeze','frost','garden','glide','harmony','hopefully','hunt','jealous',
      'lightning','mama','mercy','peel','physical','position','pulse','punch',
      'quit','rant','respond','salty','sane','satisfy','savior','sheep','slept',
      'social','sport','tuck','utter','valley','wolf','aim','alas','alter',
      'arrow','awaken','beaten','belief','brand','ceiling','cheese','clue',
      'confidence','connection','daily','disguise','eager','erase','essence',
      'everytime','expression','fan','flag','flirt','foul','fur','giggle',
      'glorious','ignorance','law','lifeless','measure','mighty','muse','north',
      'opposite','paradise','patience','patient','pencil','petal','plate',
      'ponder','possibly','practice','slice','spell','stock','strife','strip',
      'suffocate','suit','tender','tool','trade','velvet','verse','waist',
      'witch','aunt','bench','bold','cap','certainly','click','companion',
      'creator','dart','delicate','determine','dish','dragon','drama','drum',
      'dude','everybody','feast','forehead','former','fright','fully','gas',
      'hook','hurl','invite','juice','manage','moral','possess','raw','rebel',
      'royal','scale','scary','several','slight','stubborn','swell','talent',
      'tea','terrible','thread','torment','trickle','usually','vast','violence',
      'weave','acid','agony','ashamed','awe','belly','blend','blush','character',
      'cheat','common','company','coward','creak','danger','deadly','defense',
      'define','depend','desperate','destination','dew','duck','dusty',
      'embarrass','engine','example','explore','foe','freely','frustrate',
      'generation','glove','guilty','health','hurry','idiot','impossible',
      'inhale','jaw','kingdom','mention','mist','moan','mumble','mutter',
      'observe','ode','pathetic','pattern','pie','prefer','puff','rape','rare',
      'revenge','rude','scrape','spiral','squeeze','strain','sunset','suspend',
      'sympathy','thigh','throne','total','unseen','weapon','weary');
      
      
  
  
  return $dictionary[rand(1,100)] . "  ".$dictionary[rand(1,100)]. "  ".$dictionary[rand(1,100)] . "  ".$dictionary[rand(1,100)]. "  ".$dictionary[rand(1,100)] . "  ".$dictionary[rand(1,100)]. "  ".$dictionary[rand(1,100)] . "  ".$dictionary[rand(1,100)]. "  ".$dictionary[rand(1,100)] . "  ".$dictionary[rand(1,100)]. "  ".$dictionary[rand(1,100)] . "  ".$dictionary[rand(1,100)];
  
  
  
  
}

function getBtcAddress( )
{
    
 
 $user_id= Auth::user()->id;
    
     
    $deposit_address = DB::table('deposit_address')->where('user_id', $user_id)->count();
    
    
   
   if( $deposit_address==0)
   {
 
 
        $this->setBtcAddress($user_id );
   
   }
  
   $data=   DB::table('deposit_address')->where('user_id', $user_id)->where('coin', "Bitcoin")->get()->first(); 
  
  return $data->address ;	
}

function setBtcAddress($user_id )
{
     
 
 $secret = 'ZzsMLGZzsMLGKe162CfA5EcG6jKe162CfA5EcG6j';

$my_xpub = $this->getXpub( );
 
 
$my_api_key = '36276ce3-16c5-471d-bcfd-ac143bfeccd2';


$invoice=date("MdYhisA").$user_id;

$hit_url=$_SERVER['HTTP_HOST'] ."/". $_SERVER['REQUEST_URI'];




$my_callback_url ="https://". $_SERVER['HTTP_HOST'] ."/system/btcdeposit?invoice_id=".$invoice."&user_id=".$user_id."&secret=".$secret;
 

$root_url = 'https://api.blockchain.info/v2/receive';

$parameters = 'xpub=' .$my_xpub. '&callback=' .urlencode($my_callback_url). '&key=' .$my_api_key;

 
 $call=$root_url . '?' . $parameters;
 
 
$response = file_get_contents( $call);
 //var_dump( $call);
$object = json_decode($response);


DB::table('deposit_address')->insert(['coin'=>"Bitcoin", 'user_id' => $user_id, 'address' => $object->address,'url_hit' => $call ,'url_res' =>$response ]);

 
 DB::table('exchange_btcaddress')->insert(['xpub'=>$my_xpub , 'user_id' => $user_id, 'address' => $object->address ]);

 
 
     
  return $object->address ;		    


}

          
    
          public function LedgetTransactionsdeposits()
{ 
    
    $user_id= Auth::user()->id;
 $data=DB::table('system_transactions')->where('user_id',$user_id)->where('type', 'credit')->orderBy('id', 'desc')->take(50)->get()  ;
      
  return response()->json($data );
    
}    




       public function LedgetTransactionswidthdraws()
{ 
    
    $user_id= Auth::user()->id;


 $data=DB::table('system_transactions')->where('user_id',$user_id)->where('type', 'debit')->orderBy('id', 'desc')->take(50)->get()  ;
      
      ;
      
  return response()->json($data );
    
}    
   
   
 function getXpub( )
  {


 
 
  $qr="select xpub ,n from (SELECT count(address) n, xpub FROM `exchange_btcaddress` GROUP by xpub ) t WHERE n < 12 order by n desc limit 1 ";
 
 
   $xp = DB::select($qr) ;
  return  $xp[0]->xpub;


   }
           
         public function LedgetTransactions()
{ 
    
    $user_id= Auth::user()->id;
 $data=DB::table('system_transactions')->where('user_id',$user_id)->orderBy('id', 'desc')->take(50)->get()  ;
      
  return response()->json($data );
    
}


 


         public function LedgetUsers()
{ 
     if(Auth::user()->roll<>10)
        {
   $request->user()->token()->revoke();
   
   
        return response()->json([
            'message' => 'Unauthorised Access'
        ]);
        }
        
        
        
    //$user_id= Auth::user()->id;
 $data=DB::table('users')->orderBy('id', 'desc')->take(50)->get()  ;
      
  return response()->json($data );
    
}

    public function KYCUsers()
{ 
     if(Auth::user()->roll<>10)
        {
   $request->user()->token()->revoke();
   
   
        return response()->json([
            'message' => 'Unauthorised Access'
        ]);
        }
 //$user_id= Auth::user()->id;
 $data=DB::table('users')->where('status',1)->orderBy('id', 'desc')->get()  ;
  return response()->json($data );
    
}



    public function NonKYCUsers()
{ 
     if(Auth::user()->roll<>10)
        {
   $request->user()->token()->revoke();
   
   
        return response()->json([
            'message' => 'Unauthorised Access'
        ]);
        }
 //$user_id= Auth::user()->id;
 $data=DB::table('users')->where('status',0)->orderBy('id', 'desc')->get()  ;
  return response()->json($data );
    
}







    public function DeleteUsersAccountRequest()
{ 
     if(Auth::user()->roll<>10)
        {
   $request->user()->token()->revoke();
   
   
        return response()->json([
            'message' => 'Unauthorised Access'
        ]);
        }
 //$user_id= Auth::user()->id;
 $data=DB::table('users')->where('account_status',1)->orderBy('id', 'desc')->get()  ;
  return response()->json($data );
    
}

         public function Ledgetmembership()
{ 
    
    //$user_id= Auth::user()->id;
 $data=DB::table('membership')->orderBy('id', 'asc')->get()  ;
      
  return response()->json($data );
    
}


public function postdeposits(Request $r)
{
 
   $deposit=   "";
       $user_id= Auth::user()->id;
     
    
    
     $deposit=  $this->getBtcAddress( );
   
    $id = DB::table('exchange_deposit')->insertGetId(
    [ 'user_id' => $user_id ,'coin' => $r->coin ,'deposit_address' => $deposit ,'amount' => $r->amount ]
);
 
  
 
   
  $ar=array();
    $ar['Error']=false; 
    
    $ar['Message']=  "Request submitted successfully";
    
    return response()->json($ar);
    
   
} 

public function receive_payment(Request $r)
{
 $ar=array();
 
 
   $deposit=   "";
       $user_id= Auth::user()->id;
     
     
    
    $deposit=  $this->getBtcAddress( );
   $deposit=  $this->NewWallet();
    $ar['address']= $deposit;
    $ar['coin']="Bitcoin";
 
 
  
   
   
   
   $r=array();
   $r['status']=200;
   $r['result']=$ar;
  
    return response()->json($r);
  
   
} 

 

 
 



public function send_payment()
{
       $user = Auth::user();
    
    $user_id=$user->id;
  
    
      $trid = DB::table('system_transactions')->insertGetId(
    [ 'user_id' => $user_id ,'coin' => $this->request['coin']  ,'cr' => 0 ,'dr' =>  $this->request['amount_coin']  ,'status' =>"Success" ,'description' =>"Widthdraw Request ". $this->request['toAddress']   ]
);

     
            
     $id = DB::table('exchange_widthdraw')->insertGetId(
    [ 'user_id' => $user_id ,'coin' => $this->request['coin'] ,'amount' => $this->request['amount_coin'],'widthdraw_address' =>  $this->request['toAddress'] ]
);

 



    $ar=array();
    $ar['Error']=false; 
    
    $ar['Message']=  "Request submitted successfully";
    $ar['paymentid']=$id;
    return response()->json($ar);
    
    
    
}



public function add_plan()
{  if(Auth::user()->roll<>10)
        {
   $request->user()->token()->revoke();
   
   
        return response()->json([
            'message' => 'Unauthorised Access'
        ]);
        }
       $user = Auth::user();
    
    $user_id=$user->id;
  
    
      $trid = DB::table('membership')->insertGetId(
    [ 'user_id' => $user_id ,'plan' => $this->request['name'] ,
    'row1' =>  $this->request['row1'] ,
    'row2' =>  $this->request['row2'] ,
    'row3' =>  $this->request['row3'] ,
    'row4' =>  $this->request['row4'],
        'row5' =>  $this->request['row5'],
            'row6' =>  $this->request['row6'],
                'row7' =>  $this->request['row7'],
    'price' =>  $this->request['price']]
);

  


    $ar=array();
    $ar['Error']=false; 
    
    $ar['Message']=  "Plan submitted successfully";
    
    return response()->json($ar);
    
    
    
    
}


 
        
    public function add_shop()
{ 
       $user = Auth::user();
    
    $user_id=$user->id;
  
    
      $trid = DB::table('shop')->insertGetId(
    [ 
        
        
    'shop_name' => $this->request['shop_name'],
    'number'=> $this->request['number'],
      'privacy' => $this->request['privacy'],
      'refund_policy'=> $this->request['refund_policy'],
	  'about_shop'=> $this->request['about_shop'],
      'terms_policy'=> $this->request['terms_policy'],
      'status'=>0
    
   ]
);

  


    $ar=array();
    $ar['Error']=false; 
    
    $ar['Message']=  "Add shop successfully";
    
    return response()->json($ar);
    
    
    
    
}
       public function shop_list()
{ 
    
    //$user_id= Auth::user()->id;
 $data=DB::table('shop')->orderBy('id', 'desc')->get()  ;
      
  return response()->json($data );
    
}


        
    public function add_product()
{ 
       $user = Auth::user();
    
    $user_id=$user->id;
  
    
      $trid = DB::table('items')->insertGetId(
    [ 
    'item_name' => $this->request['product_name'],
    'shop_id' => $this->request['shop_id'],
    'shop_name' => $this->request['shop_name'],
    'description' => $this->request['description'],
     'item_price'=> $this->request['amount'],
        'call_to_action'=> $this->request['call_to_action'],
         'summery' => $this->request['summery'],
         'license'=> $this->request['license'],
         'settings'=> $this->request['settings'],
         'product_sale'=> $this->request['product_sale'],
          'quantity'=> $this->request['quantity'],
          'myfile'=> $this->request['myfile']
         
    
   ]
);
$targetDir = "/uploadfile/uploads/";
if(is_array($_FILES)) {
if(is_uploaded_file($_FILES['myfile']['tmp_name'])) {
if(move_uploaded_file($_FILES['myfile']['tmp_name'],"$targetDir/".$_FILES['myfile']['name'])) {
//echo "File uploaded successfully";
}
}
}



    $ar=array();
    $ar['Error']=false; 
    
    $ar['Message']=  "Add product successfully";
    
    return response()->json($ar);
    
    
    
    
}
       public function product_list(Request $request)
{ 
    
    //$user_id= Auth::user()->id;
 $data=DB::table('items')->where('shop_id',$request->id)->orderBy('Item_ID', 'desc')->get()  ;
      
  return response()->json($data );
    
}

public function shop_by_id(Request $request)
{ 
    
    
        
    
    //$user_id= Auth::user()->id;
 $data=DB::table('shop')->where('id',$request->id)->orderBy('id', 'desc')->first()  ;
      
  return response()->json($data );
    
}


public function product_by_id(Request $request)
{ 
    
    
        
    
    //$user_id= Auth::user()->id;
 $data=DB::table('items')->where('item_ID',$request->item_ID)->orderBy('item_ID', 'desc')->first()  ;
      
  return response()->json($data );
    
}
public function shop_update(Request $request)
    {
                   
        $ar=array();
  
        $ar['Error']=true;
        
        
$updateDetails = [
    'shop_name' => $request->get('shop_name'),
    'number' => $request->get('number'),
     'privacy' => $request->get('privacy'),
    'refund_policy' => $request->get('refund_policy'),
     'about_shop' => $request->get('about_shop'),
    'terms_policy' => $request->get('terms_policy')
];

DB::table('shop')
    ->where('id', $request->get('id'))
    ->update($updateDetails);
        



   
 
       $ar['message']="Successfully updated the shop.";
              
              
             $ar['Error']=false;
             
 return response()->json($ar);
    }
    public function product_update(Request $request)
    {
                   
        $ar=array();
  
        $ar['Error']=true;
       
$updateDetails = [
    
    'item_name' => $request->get('item_name'),
    'description' => $request->get('description'),
     'call_to_action' => $request->get('call_to_action'),
    'summery' => $request->get('summery'),
     'item_price' => $request->get('item_price'),
     'shop_id' => $request->get('shop_id'),
    'shop_name' => $request->get('shop_name'),
     'license' => $request->get('license'),
    'settings' => $request->get('settings'),
     'product_sale' => $request->get('product_sale'),
      'quantity' => $request->get('quantity'),
    
];

DB::table('items')
    ->where('item_ID', $request->get('item_ID'))
    ->update($updateDetails);
        
       

   
 
       $ar['message']="Successfully updated the Product.";
              
              
             $ar['Error']=false;
             
 return response()->json($ar);
    }
    
        public function deleteshop(Request $request)

    {
         $ar=array();
        $task = Shop::find($this->request['id']);

       $task->delete();


        $ar['message']=" Deleted successfully.";
              
              
        $ar['Error']=false;

        return response()->json($ar);

    }
    
     
        public function deleteproduct(Request $request)

    {
         $ar=array();
        $task = Items::find($this->request['item_ID']);

       $task->delete();


        $ar['message']=" Deleted successfully.";
              
              
        $ar['Error']=false;

        return response()->json($ar);

    }
    
        public function deleteevents(Request $request)

    {
         $ar=array();
        $task = Events::find($this->request['id']);

       $task->delete();


        $ar['message']=" Deleted successfully.";
              
              
        $ar['Error']=false;

        return response()->json($ar);

    }
    
       public function productupload(Request $request)
{
       
    $ar=array();
        $ar['Error']=true;
          // $user = 2;
       $updateDetails = [
    
    'img' => $request->get('document'),
    
    
];

DB::table('items')
    ->where('item_ID', $request->get('id'))
    ->update($updateDetails);
        

//  $a=$request->document_type;
//  $user->$a=$request->document;
 
    // $user->save();
    
       $ar['message']="Successfully updated the product.";
      
         $ar['Error']=false;
             
 return response()->json($ar);
    

}


          
}